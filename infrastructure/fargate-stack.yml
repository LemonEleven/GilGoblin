AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS Fargate deployment with ALB for 5 ECR repositories:
  gilgoblin-accountant, gilgoblin-api, gilgoblin-database,
  gilgoblin-dataupdater, and gilgoblin-frontend.

Parameters:
  EcrRepositoryAccountant:
    Type: String
    Description: "ECR repository URI for gilgoblin-accountant"
  EcrRepositoryApi:
    Type: String
    Description: "ECR repository URI for gilgoblin-api"
  EcrRepositoryDatabase:
    Type: String
    Description: "ECR repository URI for gilgoblin-database"
  EcrRepositoryDataUpdater:
    Type: String
    Description: "ECR repository URI for gilgoblin-dataupdater"
  EcrRepositoryFrontend:
    Type: String
    Description: "ECR repository URI for gilgoblin-frontend"

Resources:
  ######################
  # VPC & Networking
  ######################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "GilGoblinVPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: "PublicSubnetA"

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.3.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: "PublicSubnetB"

  # Private Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: "PrivateSubnetA"

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.4.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: "PrivateSubnetB"

  # NAT Gateways & Elastic IPs
  NatEIPA:
    Type: AWS::EC2::EIP

  NatEIPB:
    Type: AWS::EC2::EIP

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPA.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPB.AllocationId
      SubnetId: !Ref PublicSubnetB

  # Private Route Tables & Routes
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  ######################
  # ALB & Listener
  ######################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "ALB security group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "gilgoblin-alb"
      Scheme: "internet-facing"
      Type: "application"
      IpAddressType: "ipv4"
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # Target Groups (Names removed so CloudFormation generates them)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  AccountantTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  DatabaseTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  DataUpdaterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  # Listener Rules based on path patterns
  AccountantListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListener
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: [ "/accountant/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AccountantTargetGroup

  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListener
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: [ "/api/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup

  DatabaseListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListener
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 3
      Conditions:
        - Field: path-pattern
          Values: [ "/database/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DatabaseTargetGroup

  DataUpdaterListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListener
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 4
      Conditions:
        - Field: path-pattern
          Values: [ "/dataupdater/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DataUpdaterTargetGroup

  FrontendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListener
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 5
      Conditions:
        - Field: path-pattern
          Values: [ "/frontend/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  ######################
  # ECS Cluster & Execution Role
  ######################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "GilGoblinECSCluster"

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "ECSExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ######################
  # ECS Task Definitions & Services for each repository
  ######################
  AccountantTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-accountant-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-accountant-container"
          Image: !Ref EcrRepositoryAccountant
          PortMappings:
            - ContainerPort: 80

  AccountantService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - AccountantListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AccountantTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: "gilgoblin-accountant-container"
          ContainerPort: 80
          TargetGroupArn: !Ref AccountantTargetGroup

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-api-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-api-container"
          Image: !Ref EcrRepositoryApi
          PortMappings:
            - ContainerPort: 80

  ApiService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - ApiListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ApiTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: "gilgoblin-api-container"
          ContainerPort: 80
          TargetGroupArn: !Ref ApiTargetGroup

  DatabaseTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-database-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-database-container"
          Image: !Ref EcrRepositoryDatabase
          PortMappings:
            - ContainerPort: 80

  DatabaseService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - DatabaseListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref DatabaseTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: "gilgoblin-database-container"
          ContainerPort: 80
          TargetGroupArn: !Ref DatabaseTargetGroup

  DataUpdaterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-dataupdater-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-dataupdater-container"
          Image: !Ref EcrRepositoryDataUpdater
          PortMappings:
            - ContainerPort: 80

  DataUpdaterService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - DataUpdaterListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref DataUpdaterTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: "gilgoblin-dataupdater-container"
          ContainerPort: 80
          TargetGroupArn: !Ref DataUpdaterTargetGroup

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-frontend-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-frontend-container"
          Image: !Ref EcrRepositoryFrontend
          PortMappings:
            - ContainerPort: 80

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - FrontendListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: "gilgoblin-frontend-container"
          ContainerPort: 80
          TargetGroupArn: !Ref FrontendTargetGroup

Outputs:
  ALBDNSName:
    Description: "The DNS name of the ALB"
    Value: !GetAtt ALB.DNSName
