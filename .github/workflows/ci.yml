name: ci

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        env:
          ConnectionStrings__GilGoblinDbContext: ${{ secrets.DB_CONNECTION_STRING }}
        run: dotnet test --no-build --verbosity normal --filter "Category!=Component"

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish NuGet packages
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          for csproj in $(find . -name "*.csproj"); do
            dotnet pack "$csproj" --configuration Release --no-build --output ./artifacts
            for nupkg in ./artifacts/*.nupkg; do
              dotnet nuget push "$nupkg" --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json
            done
          done

      - name: Extract version
        id: extract-version
        run: |
          version=$(cat $(find . -name "*.csproj" | head -n 1) | grep -oP '(?<=<Version>).*?(?=</Version>)')
          echo "package_version=$version" >> $GITHUB_ENV

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        env:
          PACKAGE_VERSION: ${{ env.package_version }}
        run: |
          docker build -t my-docker-image:latest .
          docker tag my-docker-image:latest my-docker-image:$PACKAGE_VERSION
          docker push my-docker-image:latest
          docker push my-docker-image:$PACKAGE_VERSION
