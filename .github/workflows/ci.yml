name: ci

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      gilgoblin-database:
        image: nickreinlein/gilgoblin-database
        env:
          POSTGRES_DB: gilgoblin_db
          POSTGRES_USER: gilgoblin
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -d gilgoblin_db -U gilgoblin"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Wait for Database
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432; then
              echo "Database is ready!"
              exit 0
            else
              echo "Waiting for database... ($i/10)"
              sleep 5
            fi
          done
          echo "Database did not become ready in time."
          exit 1

      - name: Test
        env:
          ConnectionStrings__GilGoblinDbContext: ${{ secrets.DB_CONNECTION_STRING }}
        run: dotnet test --no-build --verbosity detailed --filter "Category!=Component"

  publish-nuget:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      versions: ${{ steps.collect-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build Projects in Release Mode
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            dotnet build "$csproj" --configuration Release
          done

      - id: collect-versions
        name: Collect NuGet Versions
        run: |
          VERSIONS=""
          for csproj in $(find ./src -name "*.csproj"); do
            version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$csproj" || echo "latest")
            project=$(basename "$(dirname "$csproj")")
            VERSIONS+="$project=$version;"
          done
          echo "versions=$VERSIONS" >> $GITHUB_ENV
          echo "::set-output name=versions::$VERSIONS"

      - name: Publish Packages to NuGet
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            project_dir=$(dirname "$csproj")
            dotnet pack "$csproj" --configuration Release -o "$project_dir/nupkgs"
            for pkg in "$project_dir/nupkgs/"*.nupkg; do
              dotnet nuget push "$pkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
            done
          done

  publish-docker:
    runs-on: ubuntu-latest
    needs: [build, publish-nuget]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        env:
          versions: ${{ needs.publish-nuget.outputs.versions }}
        run: |
          IFS=';' read -r -a version_array <<< "$versions"
          declare -A version_map
          for pair in "${version_array[@]}"; do
            key=$(echo "$pair" | cut -d= -f1)
            value=$(echo "$pair" | cut -d= -f2)
            version_map["$key"]="$value"
          done

          for project_dir in src/Api src/Database src/DataUpdater src/Accountant; do
            if [ -f "$project_dir/Dockerfile" ]; then
              project=$(basename "$project_dir")
              tag="${version_map[$project]:-latest}"
              image_name="${{ secrets.DOCKER_USERNAME }}/$project:$tag"
              docker build -t "$image_name" "$project_dir"
              docker push "$image_name"
            else
              echo "No Dockerfile found in $project_dir, skipping..."
            fi
          done
