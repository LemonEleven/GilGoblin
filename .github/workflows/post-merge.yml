name: Post-Merge Workflow

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.collect-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build Projects in Release Mode
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            dotnet build "$csproj" --configuration Release
          done

      - id: collect-versions
        name: Collect NuGet Versions
        run: |
          VERSIONS=""
          for csproj in $(find ./src -name "*.csproj"); do
            version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$csproj" || echo "latest")
            project=$(basename "$(dirname "$csproj")")
            VERSIONS+="$project=$version;"
          done
          echo "versions=$VERSIONS" >> $GITHUB_ENV
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

      - name: Publish Packages to NuGet
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            project_dir=$(dirname "$csproj")
            dotnet pack "$csproj" --configuration Release -o "$project_dir/nupkgs"
            for pkg in "$project_dir/nupkgs/"*.nupkg; do
              echo "Pushing package $pkg to NuGet..."
              dotnet nuget push "$pkg" \
                --skip-duplicate \
                --source "https://api.nuget.org/v3/index.json" \
                --api-key "${{ secrets.NUGET_API_KEY }}"
            done
          done

  publish-docker:
    runs-on: ubuntu-latest
    needs: [publish-nuget]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        env:
          versions: ${{ needs.publish-nuget.outputs.versions }}
        run: |
          IFS=';' read -r -a version_array <<< "$versions"
          declare -A version_map
          for pair in "${version_array[@]}"; do
            key=$(echo "$pair" | cut -d= -f1)
            value=$(echo "$pair" | cut -d= -f2)
            version_map["$key"]="$value"
          done

          for project_dir in src/Api src/Database src/DataUpdater src/Accountant src/Frontend; do
            if [ -f "$project_dir/Dockerfile" ]; then
              project=$(basename "$project_dir" | tr '[:upper:]' '[:lower:]') # Convert to lowercase
              prefixed_project="gilgoblin-$project" # Add 'gilgoblin-' prefix
              tag="${version_map[$project]:-latest}"
              image_name="${{ secrets.DOCKER_USERNAME }}/$prefixed_project:$tag"
              echo "Building and pushing Docker image: $image_name"
              docker build -t "$image_name" "$project_dir"
              docker push "$image_name"
            else
              echo "No Dockerfile found in $project_dir, skipping..."
            fi
          done